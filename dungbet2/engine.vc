int tiles[24], sprites[24]; // 3 tiles for current row, 5 for first row, 7 for second, 9 third.
int DScreen;
int St, Sel;
int Dbuf;

void Main() //Main function, gets called every retrace.
{
 int done;
 while(!done)
 {
  Render();

  DrawDungeon(); //Draw the dungeon walls, as well as all the frames..
  if(!Dscreen) MovePlayer(); //Get player input, and move him if neccesary.
  
  gotoxy(0,0); PrintString(0, str(entity.tx[plr])+ " "+str(entity.ty[plr]));
  Showpage();
 }
}

void DrawDungeon() //Function that draws the dungeon. :)
{
 For(I=0; I<4; I++) //Write the info for each player.
 {
  RectFill(1+(80*i), 0, 79+(80*i), 39, 1);
  GotoXY(1+(80*i), 0); PrintString(0, Names[i]);
  RectFill(50+(80*i), 35, 54+(80*i), 35-percent(MaxHP[i], 25, HP[i]), Clr[i]);
  RectFill(58+(80*i), 35, 62+(80*i), 35-percent(MaxMP[i], 25, MP[i]), Clr[i]);
 }
 DrawAutoMap(); //Draws the automap.
 ReadMouse();

 If(mb=2 && !Mup)
 {
  Mup=1;
  If(!Dscreen) 
  {
   Sel=0;
   for(i=0; i<4; i++)
   {
    if(mx>=0+(80*i) && mx<80+(80*i) && my>=0 && my<40) { St=i; Sel=1; }
   }
   If(!Sel) St=leader;
   Dscreen=1;
  }
  Else 
  {
   Sel=0;
   for(i=0; i<4; i++)
   {
    if(mx>=0+(80*i) && mx<80+(80*i) && my>=0 && my<40) { St=i; Sel=1; }
   }
   If(!Sel) Dscreen=0;
  }
 }

 If(!DScreen) DrawTiles(); //Draws the dungon walls.
 else StatusScreen();

 If(!mb) Mup=0;
 
 TCopySprite(mx,my, 16, 16, ptr);
// GotoXY(0, 220); PrintString(0, "MX: "+str(mx)+" MY: "+str(my)+" MB: "+str(mb));
}

void DrawAutoMap() //Draws the automap, what else? ^_^
{
 int x,y;
 int x2, y2;
 For(y=entity.ty[plr]-3; y<=entity.ty[plr]+3; y++) //Loop for the seven tiles around the player.
 {
  x2=0;
  For(x=entity.tx[plr]-3; x<=entity.tx[plr]+3; x++)
  {
   ScaleSprite(234+(8*x2), 163+(8*y2), 16, 16, 8, 8, vsp+(256*GetTile(x,y,0))); //Copy the VSP tile to the automap, at 8x8 size.
   if(entity.tx[1]=x && entity.ty[1]=y) Rect(234+(8*x2), 163+(8*y2), 241+(8*x2), 170+(8*y2), 96);
   x2++;
  }
  y2++;
 }
 TCopySprite(258, 187, 8, 8, Pointer[face]); //Show the pointer in whichever direction the player is facing.
}

void UpdateTiles(int moved) //Updates the dungeon view.
{ 
   int t, i, j, x, y; // sorry about the ambiguous variables ;)
   //Flip the background image, to make the movement look more realistic..
   if(moved)
   {
     backflip++;
     If(backflip>1) backflip=0;
   }

 t = 0;
 for(i=0; i<=3; i++)
 { for(j=0-i-1; j<i+2; j++)
  { switch(face)
   {
    case 0: x = j; y = 0-i;
    case 1: x = i; y = j;
    case 2: x = 0-j; y = i;
    case 3: x = 0-i; y = 0-j;
   }
   if(GetTile(entity.tx[plr]+x, entity.ty[plr]+y, 0))
    tiles[t] = GetTile(entity.tx[plr]+x, entity.ty[plr]+y, 0);
   else
    tiles[t] = 0;

   if(GetEntity(entity.tx[plr]+x, entity.ty[plr]+y))
    sprites[t] = GetEntity(entity.tx[plr]+x, entity.ty[plr]+y);
   else
    sprites[t] = 0;
   
   
   //Log(str(t) + ": column " + str(x) + ", row " + str(y) + " = " + str(GetTile(entity.tx[plr]+x, entity.ty[plr]+y, 0)));
   t++;
  }
 }
 
 SetRenderDest(224, 136, DBuf);
 CopySprite(0, 0,224, 136, Back[backflip]); //Draws the floor and roof image.
 //Diagonal walls row 3
 if(tiles[17]) TCopySprite(0, 0,224,136, flh3[tiles[17]-1]);
 if(tiles[18]) TCopySprite(0, 0,224,136, lh3[tiles[18]-1]);
 if(tiles[20]) TCopySprite(0, 0,224,136, rh3[tiles[20]-1]);
 if(tiles[21]) TCopySprite(0, 0,224,136, frh3[tiles[21]-1]);

 //enemies row 2
 if(sprites[18]) TCopysprite(0, 32, 64, 64, scream[2]);
 if(sprites[19]) TCopysprite(90, 32, 64, 64, scream[2]);
 if(sprites[20]) TCopysprite(180, 32, 64, 64, scream[2]);

   // horizontal walls row 2 
 if(tiles[17]) TCopySprite(0, 0,224,136, flw2[tiles[17]-1]);
 if(tiles[18]) TCopySprite(0, 0,224,136, lw2[tiles[18]-1]);
 if(tiles[19]) TCopySprite(0, 0,224,136, cw2[tiles[19]-1]);
 if(tiles[20]) TCopySprite(0, 0,224,136, rw2[tiles[20]-1]);
 if(tiles[21]) TCopySprite(0, 0,224,136, frw2[tiles[21]-1]);
 // diagonal walls row 2
 if(tiles[9]) TCopySprite(0, 0,224,136, flh2[tiles[9]-1]);
 if(tiles[10]) TCopySprite(0, 0,224,136, lh2[tiles[10]-1]);
 if(tiles[12]) TCopySprite(0, 0,224,136, rh2[tiles[12]-1]);
 if(tiles[13]) TCopySprite(0, 0,224,136, frh2[tiles[13]-1]);

 //enemies row 1
 if(sprites[10]) TCopysprite(10, 40, 64, 64, scream[1]);
 if(sprites[11]) TCopysprite(90, 40, 64, 64, scream[1]);
 if(sprites[12]) TCopysprite(170, 40, 64, 64, scream[1]);
 
 // horizontal walls row 1
 if(tiles[10]) TCopySprite(0, 0,224,136, lw1[tiles[10]-1]);
 if(tiles[11]) TCopySprite(0, 0,224,136, cw1[tiles[11]-1]);
 if(tiles[12]) TCopySprite(0, 0,224,136, rw1[tiles[12]-1]);
 // diagonal walls row 1
 if(tiles[4]) TCopySprite(0, 0,224,136,  lh1[tiles[4]-1]);
 if(tiles[6]) TCopySprite(0, 0,224,136,  rh1[tiles[6]-1]);
 
 //enemies row 0.
 if(sprites[4]) TCopysprite(10, 64, 64, 64, scream[0]);
 if(sprites[6]) TCopysprite(170, 64, 64, 64, scream[0]);
 if(sprites[5]) TCopysprite(90, 64, 64, 64, scream[0]);
 
 // horizontal walls row 0
 if(tiles[4]) TCopySprite(0, 0,224,136,  lw0[tiles[4]-1]);
 if(tiles[6]) TCopySprite(0, 0,224,136,  rw0[tiles[6]-1]);
 if(tiles[5]) TCopySprite(0, 0,224,136,  cw0[tiles[5]-1]);
  //Diagonal walls row 0.
 if(tiles[0]) TCopySprite(0, 0,224,136,  lh0[tiles[0]-1]);
 if(tiles[2]) TCopySprite(0, 0,224,136,  rh0[tiles[2]-1]);
 RestoreRenderSettings();
}

/*
From current view tiles array goes like this..
[ 15][ 16][ 17][ 18][ 19][ 20][ 21][ 22][ 23]
     [ 8 ][ 9 ][ 10][ 11][ 12][ 13][ 14]
          [ 3 ][ 4 ][ 5 ][ 6 ][ 7 ]
               [ 0 ][ 1 ][ 2 ]
                    [you]


*** Note to CY: The new wall array should look like this:

[ 11][ 12][ 13][ 14][ 15]
[ 6 ][ 7 ][ 8 ][ 9 ][ 10]
     [ 3 ][ 4 ][ 5 ]
     [ 0 ][you][ 2 ]
      ^
            1
I don't know if the memory savings will matter much, but still.. ;)

*/

void DrawTiles() //Draws the actual dungeon walls... it's the "heart" of the engine, you could say. :)
{ 
  CopySprite(0, 40, 224, 136, Dbuf);
}

int moved;
void MovePlayer() 
{
 int hit;
 moved=False; //The player hasn't moved yet. :)
 UpdateControls();
 If(up) //move forwards
 {
  moved=True;
  Unpress(5);
  Switch(face) //Find out which direction the player is facing, and move him in that direction.
  {
   Case(0): If(!GetTile(Entity.tx[plr], entity.ty[plr]-1, 6) && !GetEntity(Entity.tx[plr], entity.ty[plr]-1)) entity.ty[plr]--; Else Hit=true;
   Case(1): If(!GetTile(Entity.tx[plr]+1, entity.ty[plr], 6) && !GetEntity(Entity.tx[plr]+1, entity.ty[plr])) entity.tx[plr]++; Else Hit=true;
   Case(2): If(!GetTile(Entity.tx[plr], entity.ty[plr]+1, 6) && !GetEntity(Entity.tx[plr], entity.ty[plr]+1)) entity.ty[plr]++; Else Hit=true;
   Case(3): If(!GetTile(Entity.tx[plr]-1, entity.ty[plr], 6) && !GetEntity(Entity.tx[plr]-1, entity.ty[plr])) entity.tx[plr]--; Else Hit=true;
  }
 }
 If(down) //move backwards 
 {
  moved=True;
  Unpress(6);
  Switch(face) //Find out which direction the player is facing, and move him in the opposite direction.
  {
   Case(0): If(!GetTile(Entity.tx[plr], entity.ty[plr]+1, 6) && !GetEntity(Entity.tx[plr], entity.ty[plr]+1)) entity.ty[plr]++; Else Hit=true;
   
   Case(1): If(!GetTile(Entity.tx[plr]-1, entity.ty[plr], 6) && !GetEntity(Entity.tx[plr]-1, entity.ty[plr])) entity.tx[plr]--; Else Hit=true;
   
   Case(2): If(!GetTile(Entity.tx[plr], entity.ty[plr]-1, 6) && !GetEntity(Entity.tx[plr], entity.ty[plr]-1)) entity.ty[plr]--; Else Hit=true;
  
   Case(3): If(!GetTile(Entity.tx[plr]+1, entity.ty[plr], 6) && !GetEntity(Entity.tx[plr]+1, entity.ty[plr])) entity.tx[plr]++; Else Hit=true;
  }
 }
 If(left) //Turn the player left. 
 {
  unpress(7);
  face--;
  If(face<0) face=3;
  UpdateTiles(moved);
 }
 If(right) //Turn the player right. :)
 {
  unpress(8);
  face++;
  If(face>3) face=0;
  UpdateTiles(moved);
 }
 if(hit) moved=false;
 
 UpdateTiles(moved);
 
 if(hit) HitWall();
 If(moved && GetTile(entity.tx[plr], entity.ty[plr], 7)) CallEvent(GetTile(entity.tx[plr], entity.ty[plr], 7));
}

void HitWall()
{
 PlaySound(oof, 64, 128);
 Banner(0, "Ouchie!", 10);
 HP[0]--; HP[1]--;
}

//EOF