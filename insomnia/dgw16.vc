int Grad[64];
void GenerateGradient(int c1, int c2)
{
int alpha, r, g, b, i;
 for(i=0; i<64; i++)
 {
  r = ((GetR(c2) * alpha) + (GetR(c1) * (256 - alpha))) / 256;
  g = ((GetG(c2) * alpha) + (GetG(c1) * (256 - alpha))) / 256;
  b = ((GetB(c2) * alpha) + (GetB(c1) * (256 - alpha))) / 256;
  Grad[i]=RGB(r,g,b);
  alpha+=4;
 }
}

void DGW16(int x, int y, int x2, int y2)  
{ 
 int i;
 For(I=y; I<y2; I++)
 { 
  HLine(x,I, x2, grad[(i-y)*64/(y2-y)]);
 }
 Rect(x,y, x2, y2, RGB(200, 200, 200));
 Rect(x+1,y+1, x2-1, y2-1, RGB(216, 216, 216));
 Rect(x+2,y+2, x2-2, y2-2, RGB(200, 200, 200));
 //Round off the edges a bit.
 SetPixel(x,y,0);
 SetPixel(x2,y,0);
 SetPixel(x,y2,0);
 SetPixel(x2,y2,0);
}

int Grad2[64];

void rectgradfill(int x, int y, int x2, int y2, int c3, int c4)  
{ 
int alpha, r, g, b, i;
for(i=0; i<64; i++)
{
r = ((GetR(c4) * alpha) + (GetR(c3) * (256 - alpha))) / 256;
g = ((GetG(c4) * alpha) + (GetG(c3) * (256 - alpha))) / 256;
b = ((GetB(c4) * alpha) + (GetB(c3) * (256 - alpha))) / 256;
Grad2[i]=RGB(r,g,b);
alpha+=4;
}
 For(I=y; I<y2; I++)
 { 
  HLine(x,I, x2, grad2[(i-y)*64/(y2-y)]);
 }
 
}

void outline(int x, int y, int x2, int y2, int color)
{
Vline(x-1,y,y2,color);
Vline(x2+1,y,y2,color);
Hline(x,y-1,x2,color);
Hline(x,y2+1,x2,color);
}

void DGW162(int x, int y, int x2, int y2, int c3, int c4)  
{ 
int alpha, r, g, b, i;
for(i=0; i<64; i++)
{
r = ((GetR(c4) * alpha) + (GetR(c3) * (256 - alpha))) / 256;
g = ((GetG(c4) * alpha) + (GetG(c3) * (256 - alpha))) / 256;
b = ((GetB(c4) * alpha) + (GetB(c3) * (256 - alpha))) / 256;
Grad2[i]=RGB(r,g,b);
alpha+=4;
}
 For(I=y; I<y2; I++)
 { 
  HLine(x,I, x2, grad2[(i-y)*64/(y2-y)]);
 }
 
}