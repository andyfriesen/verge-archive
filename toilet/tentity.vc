int entity.health[100], entity.type[100], entity.dir[100], entity.move[100];
int entity.eval[100], entity.hurt[100];

#define D_U 1
#define D_D 2
#define D_L 4
#define D_R 8
#define NOMOVE 0
#define MOVENORMAL 1
#define MOVEUPDOWN 2
#define MOVEOFF 3

void ProcessEnemies()
{
 int i;
 for (i=1; i<=numents; i++)
  {
   switch(entity.type[i]*entity.eval[i])
   {
    // Prehistoric
    case 1: // Dactyl. Moves left slowly.
     MoveEntity(i, 0, NOMOVE);
     AnimateEntity(i,0,5,4);
     CheckifHit(i, 100);
     CheckCollide(i);

    case 2: // Ceratops. Moves up and down, shoots.
     MoveEntity(i, 1, MOVEUPDOWN);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(3)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING2LEFT + HITPLAYER, 160, 11 ); }
     CheckifHit(i, 250);
     CheckCollide(i);

    case 3: // Blob. Oscillates.
     MoveEntity(i, 0+sin(counter*10%360)>>14, MOVEUPDOWN);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(10)=0) { SpawnObject( entity.x[i], entity.y[i]+12, GOING2LEFT + HITPLAYER, 160, 12 ); }
     if (counter%50=0 && random(10)=0) { SpawnObject( entity.x[i], entity.y[i]+12, GOING2LEFT + GOINGUP + HITPLAYER, 160, 12 ); }
     if (counter%50=0 && random(10)=0) { SpawnObject( entity.x[i], entity.y[i]+12, GOING2LEFT + GOINGDOWN + HITPLAYER, 160, 12 ); }

     CheckifHit(i, 200);
     CheckCollide(i);

    // Roman
    case 11: // Harpy
     MoveEntity(i, 0, NOMOVE);
     AnimateEntity(i,0,5,4);
     CheckifHit(i, 200);
     CheckCollide(i);

    case 12: // Sky Chariot
     MoveEntity(i, 1, MOVEUPDOWN);
     AnimateEntity(i,0,5,2);
     if (counter%50=0 && random(3)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING2LEFT + HITPLAYER, 160, 9 ); }
     CheckifHit(i, 350);
     CheckCollide(i);

    case 13: // Roc
     entity.dir[i]=D_L;
     MoveEntity(i, 1, MOVENORMAL);
     AnimateEntity(i,0,5,4);
     CheckifHit(i, 400);
     CheckCollide(i);

    case 14: // Ballista
     entity.y[i]=200-16;
     if (counter%10=0 && random(3)=0 && entity.move[i]=0) { SpawnObject( entity.x[i], entity.y[i]-8, GOING2LEFT + GOING2UP + HITPLAYER, 110, 10 ); entity.move[i]=50; }
     entity.specframe[i]=0;
     if (entity.move[i]>0) { entity.move[i]--; if (entity.move[i]>10) entity.specframe[i]=1; }
     CheckifHit(i, 300);
     CheckCollide(i);

    // Medieval
    case 21: // Gryphon Rider
     entity.dir[i]=D_L;
     MoveEntity(i, 2, MOVENORMAL);
     AnimateEntity(i,0,5,4);
     CheckifHit(i, 500);
     CheckCollide(i);

    case 22: // Catapult
     entity.y[i]=200-16;
     if (counter%10=0 && random(3)=0 && entity.move[i]=0) { SpawnObject( entity.x[i], entity.y[i]-8, GOING2LEFT + GOING2UP + HITPLAYER, 110, 11 ); entity.move[i]=50; }
     entity.specframe[i]=0;
     if (entity.move[i]>0) { entity.move[i]--; if (entity.move[i]>10) entity.specframe[i]=1; }
     CheckifHit(i, 500);
     CheckCollide(i);

    case 23: // Dragon
     entity.dir[i]=D_L;
     MoveEntity(i, 1, MOVENORMAL);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(3)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING2LEFT + GOINGLEFT + HITPLAYER, 120, 8 ); }
     CheckifHit(i, 750);
     CheckCollide(i);

    // Today
    case 31: // Helicopter
     MoveEntity(i, 1, MOVEUPDOWN);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(5)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING4LEFT + HITPLAYER, 160, 15 ); }
     CheckifHit(i, 500);
     CheckCollide(i);

    case 32: // Airplane
     entity.dir[i]=D_L;
     MoveEntity(i, 1, MOVENORMAL);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(5)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING4LEFT + HITPLAYER, 160, 15 ); }
     CheckifHit(i, 750);
     CheckCollide(i);

    case 33: // Nuclear Pogo Stick
     MoveEntity(i, 0+sin(counter*10%360)>>14, MOVEUPDOWN);
     AnimateEntity(i,0,5,1);
     if (counter%50=0 && random(5)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING4LEFT + HITPLAYER, 160, 8 ); }
     CheckifHit(i, 900);
     CheckCollide(i);

    case 34: // Stealth Plane
     entity.dir[i]=D_L;
     MoveEntity(i, 5, MOVENORMAL);
     AnimateEntity(i,0,5,1);
     CheckifHit(i, 1200);
     CheckCollide(i);

    case 35: // Robot Mercenary
     if (entity.dir[i]=0) entity.dir[i]=D_U;
     MoveEntity(i, 3, MOVEUPDOWN);
     AnimateEntity(i,0,5,1);
     if (counter%30=0 && random(4)=0) { SpawnObject( entity.x[i], entity.y[i]+16, GOING4LEFT + HITPLAYER, 160, 8 ); }
     CheckifHit(i, 10000);
     CheckCollide(i);

    // Future
    case 41: // Robot Drone
     MoveEntity(i, 0+sin(counter*10%360)>>14, MOVEUPDOWN);
     AnimateEntity(i,0,5,2);
     CheckifHit(i, 100);
     CheckCollide(i);

    case 42: // Flying Carrier
     MoveEntity(i, 1, MOVEUPDOWN);
     AnimateEntity(i,0,5,4);
     if (counter%50=0 && random(10)=0) { SpawnObject( entity.x[i], entity.y[i]+8, GOING2LEFT + HITPLAYER, 160, 8 ); Playsound(snd_mail,64,128); }
     CheckifHit(i, 100);
     CheckCollide(i);

    case 43: // Robot Trooper
     MoveEntity(i, 1, MOVEUPDOWN);
     AnimateEntity(i,0,5,1);
     if (counter%50=0 && random(5)=0) { SpawnObject( entity.x[i], entity.y[i]+16, GOING2LEFT + HITPLAYER, 160, 8 ); }
     CheckifHit(i, 100);
     CheckCollide(i);
   }
  }
}

void AnimateEntity(int e, int f, int t, int s)
{
 entity.specframe[e]=f+counter/t%s;
}

void MoveEntity(int ent, int speed, int movetype)
{
    if (entity.dir[ent] & D_U) { entity.y[ent]-=speed; }
    if (entity.dir[ent] & D_D) { entity.y[ent]+=speed; }
    if (entity.dir[ent] & D_L) { entity.x[ent]-=speed; }
    if (entity.dir[ent] & D_R) { entity.x[ent]+=speed; }
 switch(movetype)
  {
   case MOVENORMAL:
    if (entity.dir[ent]=0) entity.dir[ent]=D_U;
    if (entity.y[ent] <= 0)      { entity.dir[ent]=entity.dir[ent]-D_U+D_D; }
    if (entity.y[ent] >= 200-16) { entity.dir[ent]=entity.dir[ent]-D_D+D_U; }
   case MOVEUPDOWN:
    if (entity.dir[ent]=0) entity.dir[ent]=D_U;
    if (entity.y[ent] <= 0)      { entity.dir[ent]=D_D; }
    if (entity.y[ent] >= 200-16) { entity.dir[ent]=D_U; }
    if (counter%10=0 && random(5)=1) { entity.dir[ent]=D_U+D_D-(entity.dir[ent] & (D_U+D_D)); }
   // case MOVEOFF:
  }
 if (entity.x[ent]<xWin-40) { DestroyEntity(ent); }
 if (entity.y[ent]<0-40) { DestroyEntity(ent); }
 if (entity.y[ent]>240) { DestroyEntity(ent); }

}

void CheckifHit(int i, int sc)
{
 int x;
 if (entity.hurt[i]) { entity.health[i]-=strength; entity.hurt[i]=0; }
 if (entity.health[i]<=0)
 {
  SpawnObject(entity.x[i]+8,entity.y[i]+8,VANISHING,10,13);
  killed++;
  if (killed%5=0)
   { x=random(3); SetTile(entity.x[i]+8/16,entity.y[i]+8/16,0,40+(7*x)); SetTile(entity.x[i]+8/16,entity.y[i]+8/16,7,x+1); }
  if (entity.type[i]=35) won=1;
  DestroyEntity(i);
  score+=sc;
       PlaySound(snd_smlboom,64,128);
 }

}

void CheckCollide(int i)
{
 if (entity.x[i]+16>entity.x[player] &&
     entity.y[i]+16>entity.y[player] &&
     entity.x[i]<entity.x[player]+32 &&
     entity.y[i]<entity.y[player]+32)
      {
       health-=3; if (health<0) health=0;
       SpawnObject(entity.x[i]+8,entity.y[i]+8,VANISHING,10,13);
       if (entity.type[i]!=35) DestroyEntity(i);
       PlaySound(snd_fart1,64,128);

      }
}

void CreateEntity(int x, int y, int t)
{
 int i, j;
 for (i=1; i<numents; i++)
  {
   if (entity.eval[i]=0 && entity.type[i]=t) j=i;
  }
 if (j=0)
  {
   switch(t)
    {
     case 1: j=EntitySpawn(0,0,"DACTYL.CHR");
     case 2: j=EntitySpawn(0,0,"CERATOPS.CHR");
     case 3: j=EntitySpawn(0,0,"BLOB.CHR");
    // Roman
    case 11: j=EntitySpawn(0,0,"HARPY.CHR"); // Harpy
    case 12: j=EntitySpawn(0,0,"CHARIOT.CHR"); // Sky Chariot
    case 13: j=EntitySpawn(0,0,"ROC.CHR"); // Roc
    case 14: j=EntitySpawn(0,0,"BALLISTA.CHR"); // Ballista
    // Medieval
    case 21: j=EntitySpawn(0,0,"GRYPHON.CHR"); // Gryphon Rider
    case 22: j=EntitySpawn(0,0,"CATAPULT.CHR"); // Catapult
    case 23: j=EntitySpawn(0,0,"DRAGON.CHR"); // Dragon
    // Today
    case 31: j=EntitySpawn(0,0,"CHOPPER.CHR"); // Helicopter
    case 32: j=EntitySpawn(0,0,"PLANE.CHR"); // Airplane
    case 33: j=EntitySpawn(0,0,"POGO.CHR"); // Nuclear Pogo Stick
    case 34: j=EntitySpawn(0,0,"STEALTH.CHR"); // Stealth Plane
    case 35: j=EntitySpawn(0,0,"SENTRY2.CHR"); // Robot Mercenary
    // Future
    case 41: j=EntitySpawn(0,0,"DRONE.CHR"); // Robot Drone
    case 42: j=EntitySpawn(0,0,"FLYDRONE.CHR"); // Flying Carrier
    case 43: j=EntitySpawn(0,0,"SENTRY.CHR"); // Robot Trooper
    }
  }
 entity.x[j]=x;
 entity.y[j]=y;
 entity.type[j]=t;
 entity.eval[j]=1;
   switch(t)
    {
     case 1: entity.health[j]=4;
     case 2: entity.health[j]=6;
     case 3: entity.health[j]=4;
    // Roman
    case 11: entity.health[j]=6; // Harpy
    case 12: entity.health[j]=4; // Sky Chariot
    case 13: entity.health[j]=4; // Roc
    case 14: entity.health[j]=2; // Ballista
    // Medieval
    case 21: entity.health[j]=5; // Gryphon Rider
    case 22: entity.health[j]=4; // Catapult
    case 23: entity.health[j]=7; // Dragon
    // Today
    case 31: entity.health[j]=6; // Helicopter
    case 32: entity.health[j]=7; // Airplane
    case 33: entity.health[j]=5; // Nuclear Pogo Stick
    case 34: entity.health[j]=3; // Stealth Plane
    case 35: entity.health[j]=20; // Robot Mercenary
    // Future
    case 41: entity.health[j]=2; // Robot Drone
    case 42: entity.health[j]=2; // Flying Carrier
    case 43: entity.health[j]=3; // Robot Trooper

    }
}

void DestroyEntity(int e)
{
 entity.y[e]=500;
 entity.eval[e]=0;
}

